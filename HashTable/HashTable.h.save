#pragma once

#include "HashTableEntry.h"

template<typename KeyType, typename DataType, size_t size = 100>
class HashTable
{
using Entry = HashTableEntry<KeyType, DataType>;
public:
  HashTable() {}
  ~HashTable() {}

  void Add(KeyType key, DataType data)
  {
      uint32_t index = DefaultHashCodeGenerator(key);
      Entry& entry = entries[index];

      while (&entries[index] != nullptr)
          entry = entry.next;

      entry = Entry { key, data };
  }
  // Get entry in hash table that matches the given key.
  Entry& GetEntry(KeyType key)
  {      uint32_t index = DefaultHashCodeGenerator(key);
      Entry& entry = entries[index];

      while (entries[index] != nullptr)
      {
          if (entry.key == key) return entry;

          entry = entry.next;
      }

      return entries.end(); // Return NULL if entry not found.
  }

  size_t Size() const { return size; }

  void Remove() {}

  HashTable& operator=(const HashTable& other) = delete;
  HashTable& operator=(HashTable&& other) = delete;

private:
  uint32_t DefaultHashCodeGenerator(uint32_t key) const { return key % size; }
  uint32_t DefaultHashCodeGenerator(std::string key) const { return std::stoi(key) % size; }
  std::array<Entry, size> entries = { nullptr };
};
